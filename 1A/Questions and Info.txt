Question 1 (Lab 0 - not evaluated):
Find the kth largest number in best possible time complexity

Question 2 (Lab 1 - evaluated):
Implementation of Merge Sort in such a way, that it 
partitions the array into 2 sub-arrays having 1/3 of 
original array and 2/3 of original array

Question 3 (Lab 2 - evaluated):
Implementation of Stooge Sort where an array is 
recursively sorted for first 2/3rd part, the last 2/3rd
part, and again the first 2/3rd part, per recursive call

Question 4 (Lab 3 - not evaluated):
Find total number of local maximae in a given array and print them all

Question 5 (Lab 4 - evaluated):
Print all subsets from a given array of size n, whose 
sum is exactly equal to a given target sum k

Question 6 (Lab 5 - evaluated):
For a given n, find the total number of operations required to reach n in minimum steps such that, starting form 1, at any point,
  
                            increment(x = x+1)
                           /
                          x
                           \
                            double(x = x*2)
        
 Here, x goes from 1 to n.
 
 
Question 7 (Lab 6 - not evaluated):
 You have two very large binary trees: T1, with millions of nodes, and T2, with hundreds of
nodes. Create an algorithm to decide if T2 is a subtree of T1.


Question 8 (Lab 7 - not evaluated):
Given an m×n matrix of integers, you are to write a program that computes a path
of minimal weight. A path starts anywhere in column 1 (the first column) and consists
of a sequence of steps terminating in column n (the last column). A step consists of
traveling from column i to column i + 1 in an adjacent (horizontal or diagonal) row.
The first and last rows (rows 1 and m) of a matrix are considered adjacent, i.e., the
matrix “wraps” so that it represents a horizontal cylinder. Legal steps are illustrated below:

     (x+1,y+1)
    /
(x,y)-(x+1,y)
    \
     (x+1,y-1)

The weight of a path is the sum of the integers in each of the n cells of the matrix that are visited.


Question 9 (Lab 8 - evaluated):
